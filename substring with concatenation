class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<>();
        int n = s.length();
        int m = words.length;
        int len = words[0].length();
        
        Map<String, Integer> wordMap = new HashMap<>();
        for (String word : words) {
            wordMap.put(word, wordMap.getOrDefault(word, 0) + 1);
        }
        
        for (int i = 0; i < len; i++) {
            Map<String, Integer> currentMap = new HashMap<>();
            int left = i;
            int count = 0;
            
            for (int j = i; j <= n - len; j += len) {
                String word = s.substring(j, j + len);
                
                if (wordMap.containsKey(word)) {
                    currentMap.put(word, currentMap.getOrDefault(word, 0) + 1);
                    count++;
                    
                    while (currentMap.get(word) > wordMap.get(word)) {
                        String leftWord = s.substring(left, left + len);
                        currentMap.put(leftWord, currentMap.get(leftWord) - 1);
                        count--;
                        left += len;
                    }
                    
                    if (count == m) {
                        result.add(left);
                        String leftWord = s.substring(left, left + len);
                        currentMap.put(leftWord, currentMap.get(leftWord) - 1);
                        count--;
                        left += len;
                    }
                } else {
                    currentMap.clear();
                    count = 0;
                    left = j + len;
                }
            }
        }
        
        return result;
    }
}